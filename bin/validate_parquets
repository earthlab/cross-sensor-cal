#!/usr/bin/env python
from pathlib import Path
import re
import sys

import pyarrow.parquet as pq


def has_lonlat(path: Path) -> bool:
    cols = pq.read_schema(path).names
    return "lon" in cols and "lat" in cols


def is_ok_columns(cols):
    # non-spectral can be anything; spectral must match <stage>_b###_wl####nm ascending within each stage
    spec = [c for c in cols if "_wl" in c]
    last = -1
    for c in spec:
        m = re.search(r"wl(\d+)nm$", c)
        if not m:
            return False
        wl = int(m.group(1))
        if wl < last:
            return False
        last = wl
    return True


def main(p: str):
    root = Path(p)
    bad = []
    for q in root.glob("*.parquet"):
        if not has_lonlat(q):
            bad.append(
                (
                    q.name,
                    f"missing lat/lon (try: bin/repair_lonlat_in_place {q.parent})",
                )
            )
            continue
        try:
            schema = pq.read_schema(q)
        except Exception as exc:  # pragma: no cover - defensive, should rarely happen
            bad.append((q.name, f"unable to read schema: {exc}"))
            continue
        cols = list(schema.names)
        if not is_ok_columns(cols):
            bad.append((q.name, "spectral columns unsorted or misnamed"))
    if bad:
        print("❌ Issues found:")
        for name, msg in bad:
            print(" -", name, "→", msg)
        sys.exit(1)
    print("✅ All parquet files look consistent.")


if __name__ == "__main__":
    main(sys.argv[1] if len(sys.argv) > 1 else ".")
